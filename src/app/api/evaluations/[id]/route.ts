import { type NextRequest, NextResponse } from "next/server";
import { getEvaluationById } from "@/lib/evaluation-utils";
import { createRouteHandlerClient } from "@supabase/auth-helpers-nextjs";
import { cookies } from "next/headers";
import {
  withApiAuth,
  unauthorizedResponse,
  forbiddenResponse,
} from "@/lib/middleware/api-authorization";
import { canAccessEvaluation } from "@/lib/auth/permission-checks";
import { prisma } from "@/lib/prisma";

interface EvaluationData {
  id: string;
  type: string;
  title: string;
  score: number | null;
  createdAt: Date;
  completedAt: Date | null;
  answers: Record<string, unknown>;
  metadata: Record<string, unknown>;
  profile: {
    firstName: string | null;
    company: string | null;
    [key: string]: unknown;
  };
  profileId: string;
}

interface CategoryData {
  name: string;
  score: number;
  maxScore: number;
}

// Function to get maturity level information based on score for initial evaluations
function getInitialMaturityLevel(score: number) {
  if (score <= 9) {
    return {
      level: "Nivel 1 â€“ Inicial / Ad-hoc",
      description:
        "No hay un enfoque estructurado de ciberseguridad. Los controles son inexistentes o informales. Se requiere establecer procesos y medidas de seguridad bÃ¡sicas.",
      color: "red",
      emoji: "ðŸ”´",
    };
  }
  if (score <= 19) {
    return {
      level: "Nivel 2 â€“ Repetible pero intuitivo",
      description:
        "Existen algunos controles de ciberseguridad, pero no estÃ¡n formalizados ni aplicados de manera consistente. AÃºn se depende de acciones individuales y no hay gestiÃ³n centralizada.",
      color: "orange",
      emoji: "ðŸŸ ",
    };
  }
  if (score <= 29) {
    return {
      level: "Nivel 3 â€“ Definido",
      description:
        "La organizaciÃ³n cuenta con polÃ­ticas y procesos documentados de ciberseguridad. Hay roles definidos, pero aÃºn falta optimizar la aplicaciÃ³n y supervisiÃ³n de estos controles.",
      color: "yellow",
      emoji: "ðŸŸ¡",
    };
  }
  if (score <= 39) {
    return {
      level: "Nivel 4 â€“ Gestionado y Medido",
      description:
        "La ciberseguridad se gestiona activamente con mÃ©tricas, auditorÃ­as y monitoreo continuo. Se aplican mejoras constantes, pero hay oportunidades de optimizaciÃ³n en procesos crÃ­ticos.",
      color: "green",
      emoji: "ðŸŸ¢",
    };
  }
  if (score <= 44) {
    return {
      level: "Nivel 5 â€“ Optimizado",
      description:
        "La ciberseguridad estÃ¡ en un nivel avanzado con controles implementados y revisados periÃ³dicamente. Se han adoptado procesos de mejora continua, aunque aÃºn pueden fortalecerse ciertos aspectos estratÃ©gicos.",
      color: "blue",
      emoji: "ðŸ”µ",
    };
  }
  // score === 45
  return {
    level: "Nivel 5 â€“ Ã“ptimo",
    description:
      "La ciberseguridad es robusta y completamente integrada en la organizaciÃ³n. Se han automatizado procesos, gestionado proactivamente los riesgos y optimizado los controles. Sin embargo, siempre hay margen de evoluciÃ³n ante nuevas amenazas.",
    color: "blue",
    emoji: "ðŸ”µ",
  };
}

// Function to get maturity level information based on score for advanced evaluations
function getAdvancedMaturityLevel(score: number) {
  if (score <= 15) {
    return {
      level: "Nivel 1 â€“ Inicial / Ad-hoc",
      description:
        "La seguridad se maneja de forma reactiva. No hay procesos documentados ni una estructura clara para gestionar riesgos y proteger la informaciÃ³n.",
      advice:
        "Trabaja en establecer una estrategia inicial de seguridad, enfocada en definir polÃ­ticas, roles y procesos bÃ¡sicos para proteger la informaciÃ³n. ISO 27001 y NIST recomiendan empezar con la identificaciÃ³n de activos y riesgos.",
      color: "red",
      emoji: "ðŸ”´",
    };
  }
  if (score <= 34) {
    return {
      level: "Nivel 2 â€“ Repetible pero intuitivo",
      description:
        "Existen controles bÃ¡sicos, pero su aplicaciÃ³n no es uniforme. La seguridad depende de esfuerzos individuales y acciones aisladas en lugar de procesos bien definidos.",
      advice:
        "Estandariza y documenta las polÃ­ticas de seguridad, asegurando que sean aplicadas en toda la organizaciÃ³n. Trabaja en la gestiÃ³n de riesgos y en el uso de controles tÃ©cnicos recomendados por CIS Controls y NIST CSF.",
      color: "orange",
      emoji: "ðŸŸ ",
    };
  }
  if (score <= 51) {
    return {
      level: "Nivel 3 â€“ Definido",
      description:
        "Los procesos de ciberseguridad estÃ¡n estructurados y alineados con estÃ¡ndares como ISO 27001, NIST y CIS. Se han implementado controles en la nube, gestiÃ³n de vulnerabilidades y auditorÃ­as.",
      advice:
        "Profundiza en la mediciÃ³n y optimizaciÃ³n de los controles, con el uso de monitoreo continuo y mÃ©tricas de seguridad. Explora herramientas de Zero Trust, segmentaciÃ³n de red y pruebas de seguridad en aplicaciones (DevSecOps, OWASP ASVS).",
      color: "yellow",
      emoji: "ðŸŸ¡",
    };
  }
  if (score <= 66) {
    return {
      level: "Nivel 4 â€“ Gestionado y Medido",
      description:
        "La ciberseguridad es gestionada con mÃ©tricas, auditorÃ­as y monitoreo activo. Se han implementado SOC, SIEM, anÃ¡lisis de amenazas y simulaciones de incidentes (Red Team, Blue Team).",
      advice:
        "Asegura la mejora continua en la gestiÃ³n de incidentes y la resiliencia organizacional. Refuerza el uso de inteligencia de amenazas (OSINT, Dark Web Monitoring) y la automatizaciÃ³n de respuestas a incidentes (SOAR, XDR).",
      color: "green",
      emoji: "ðŸŸ¢",
    };
  }
  if (score <= 74) {
    return {
      level: "Nivel 5 â€“ Optimizado",
      description:
        "Ciberseguridad avanzada con procesos automatizados y monitoreo en tiempo real. Se han adoptado estrategias como Zero Trust, detecciÃ³n de amenazas con IA y seguridad en la nube con cumplimiento de marcos como AWS Well-Architected, Google Cloud Security y Azure Security Center.",
      advice:
        "Sigue fortaleciendo la estrategia de seguridad con ciberinteligencia y automatizaciÃ³n. EvalÃºa constantemente nuevas tecnologÃ­as, mejora la gestiÃ³n de crisis y resiliencia y optimiza los procesos de respuesta a incidentes con IA.",
      color: "blue",
      emoji: "ðŸ”µ",
    };
  }
  // score === 75
  return {
    level: "Nivel 5 â€“ Ã“ptimo",
    description:
      "Ciberseguridad completamente integrada en la cultura organizacional. Se han implementado detecciÃ³n de amenazas con IA, automatizaciÃ³n total de respuesta a incidentes, monitoreo continuo de la Dark Web y cumplimiento avanzado de seguridad en entornos hÃ­bridos y en la nube.",
    advice:
      "Se nota que has trabajado en ciberseguridad y dominas los estÃ¡ndares. MantÃ©n un enfoque en innovaciÃ³n y evoluciÃ³n, asegurando que el equipo y la organizaciÃ³n estÃ©n preparados para amenazas emergentes. ContinÃºa reforzando la estrategia con simulaciones avanzadas y escenarios de crisis en entornos reales.",
    color: "blue",
    emoji: "ðŸ”µ",
  };
}

export async function GET(
  req: NextRequest,
  { params }: { params: { id: string } }
) {
  return withApiAuth(req, async (req, user) => {
    try {
      const evaluationId = params.id;

      // Must be authenticated to access evaluations
      if (!user) {
        return unauthorizedResponse();
      }

      // Check if the user has permission to access this evaluation
      const hasAccess = await canAccessEvaluation(user.id, evaluationId);

      if (!hasAccess) {
        return forbiddenResponse();
      }

      // Get the evaluation
      const evaluation = await prisma.evaluation.findUnique({
        where: { id: evaluationId },
      });

      if (!evaluation) {
        return NextResponse.json(
          { error: "Evaluation not found" },
          { status: 404 }
        );
      }

      // Return the evaluation
      return NextResponse.json({ evaluation });
    } catch (error) {
      console.error("Error in evaluation GET:", error);
      return NextResponse.json(
        { error: "Internal server error" },
        { status: 500 }
      );
    }
  });
}

export async function PATCH(
  req: NextRequest,
  { params }: { params: { id: string } }
) {
  return withApiAuth(req, async (req, user) => {
    try {
      const evaluationId = params.id;

      // Must be authenticated to update evaluations
      if (!user) {
        return unauthorizedResponse();
      }

      // Check if the user has permission to access this evaluation
      const hasAccess = await canAccessEvaluation(user.id, evaluationId);

      if (!hasAccess) {
        return forbiddenResponse();
      }

      // Parse the request body
      const body = await req.json();

      // Update the evaluation
      const evaluation = await prisma.evaluation.update({
        where: { id: evaluationId },
        data: {
          // Only allow updating certain fields
          // This prevents users from changing fields they shouldn't
          title: body.title,
          answers: body.answers,
          // Don't allow changing profileId or other sensitive fields
        },
      });

      // Return the updated evaluation
      return NextResponse.json({ evaluation });
    } catch (error) {
      console.error("Error in evaluation PATCH:", error);
      return NextResponse.json(
        { error: "Internal server error" },
        { status: 500 }
      );
    }
  });
}
