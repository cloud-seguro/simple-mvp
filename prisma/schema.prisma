generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Profile {
  id              String           @id @default(cuid())
  userId          String           @unique
  avatarUrl       String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  active          Boolean          @default(true)
  firstName       String?          @map("first_name")
  lastName        String?          @map("last_name")
  role            UserRole         @default(FREE)
  company         String?
  company_role    String?
  email           String?          @unique
  phoneNumber     String?          @map("phone_number")
  stripeCustomerId String?         @map("stripe_customer_id")
  stripeSubscriptionId String?     @map("stripe_subscription_id")
  stripePriceId   String?          @map("stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map("stripe_current_period_end")
  blogPosts       BlogPost[]
  engagements     Engagement[]
  evaluations     Evaluation[]
  specialistDeals SpecialistDeal[]
  specialists     Specialist[]

  @@index([userId])
  @@map("profiles")
}

model Evaluation {
  id          String         @id @default(cuid())
  type        EvaluationType
  title       String
  score       Float?
  profileId   String?
  answers     Json
  createdAt   DateTime       @default(now())
  completedAt DateTime?
  metadata    Json?
  accessCode  String?
  guestEmail  String?
  guestFirstName String?
  guestLastName  String?
  guestCompany   String?
  guestPhoneNumber String?
  profile     Profile?       @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@index([profileId])
  @@index([accessCode])
  @@map("evaluations")
}

model Specialist {
  id               String           @id @default(cuid())
  name             String
  bio              String
  expertiseAreas   ExpertiseArea[]
  contactEmail     String
  imageUrl         String?
  hourlyRate       Float?
  linkedinProfileUrl String?
  skills           String[]
  location         String?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  active           Boolean          @default(true)
  createdById      String
  engagements      Engagement[]
  deals            SpecialistDeal[]
  createdBy        Profile          @relation(fields: [createdById], references: [id])

  @@index([createdById])
  @@map("specialists")
}

model BlogPost {
  id            String         @id @default(cuid())
  slug          String         @unique
  title         String
  excerpt       String
  content       String
  coverImage    String?
  published     Boolean        @default(false)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  authorId      String
  tags          String[]
  description   String?
  featuredImage String?
  status        BlogPostStatus @default(DRAFT)
  author        Profile        @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@index([authorId])
  @@map("blog_posts")
}

model Engagement {
  id           String           @id @default(cuid())
  title        String
  description  String
  status       EngagementStatus @default(PENDING)
  budget       Float?
  startDate    DateTime?
  endDate      DateTime?
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  profileId    String
  specialistId String
  dealId       String?
  messages     Message[]
  attachments  Attachment[]
  statusHistory StatusChange[]
  deal         SpecialistDeal?  @relation(fields: [dealId], references: [id])
  profile      Profile          @relation(fields: [profileId], references: [id], onDelete: Cascade)
  specialist   Specialist       @relation(fields: [specialistId], references: [id])

  @@index([profileId])
  @@index([specialistId])
  @@index([dealId])
  @@map("engagements")
}

model Message {
  id           String     @id @default(cuid())
  content      String
  sentAt       DateTime   @default(now())
  senderIsUser Boolean
  engagementId String
  engagement   Engagement @relation(fields: [engagementId], references: [id], onDelete: Cascade)

  @@index([engagementId])
  @@map("engagement_messages")
}

model SpecialistDeal {
  id           String       @id @default(cuid())
  title        String
  description  String
  price        Float
  durationDays Int
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  active       Boolean      @default(true)
  specialistId String
  createdById  String
  engagements  Engagement[]
  createdBy    Profile      @relation(fields: [createdById], references: [id])
  specialist   Specialist   @relation(fields: [specialistId], references: [id])

  @@index([specialistId])
  @@index([createdById])
  @@map("specialist_deals")
}

model Attachment {
  id           String     @id @default(cuid())
  fileName     String
  fileUrl      String
  fileType     String
  fileSize     Int
  uploadedAt   DateTime   @default(now())
  engagementId String
  engagement   Engagement @relation(fields: [engagementId], references: [id], onDelete: Cascade)

  @@index([engagementId])
  @@map("engagement_attachments")
}

model StatusChange {
  id           String          @id @default(cuid())
  previousStatus EngagementStatus
  newStatus    EngagementStatus
  reason       String?
  changedAt    DateTime        @default(now())
  engagementId String
  engagement   Engagement      @relation(fields: [engagementId], references: [id], onDelete: Cascade)

  @@index([engagementId])
  @@map("engagement_status_history")
}

enum UserRole {
  FREE
  PREMIUM
  SUPERADMIN
}

enum EvaluationType {
  INITIAL
  ADVANCED
}

enum BlogPostStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum ExpertiseArea {
  NETWORK_SECURITY
  APPLICATION_SECURITY
  CLOUD_SECURITY
  INCIDENT_RESPONSE
  SECURITY_ASSESSMENT
  COMPLIANCE
  SECURITY_TRAINING
  SECURITY_ARCHITECTURE
  DATA_PROTECTION
  GENERAL
}

enum EngagementStatus {
  PENDING
  ACCEPTED
  REJECTED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}
