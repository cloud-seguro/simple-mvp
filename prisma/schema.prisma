// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Enums
enum UserRole {
  FREE      // Basic users who can only access initial evaluations
  PREMIUM   // Premium users who can access advanced evaluations and dashboard
  SUPERADMIN
}

enum EvaluationType {
  INITIAL
  ADVANCED
}

// Blog post status
enum BlogPostStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

// Specialist expertise areas
enum ExpertiseArea {
  NETWORK_SECURITY
  APPLICATION_SECURITY
  CLOUD_SECURITY
  INCIDENT_RESPONSE
  SECURITY_ASSESSMENT
  COMPLIANCE
  SECURITY_TRAINING
  SECURITY_ARCHITECTURE
  DATA_PROTECTION
  GENERAL
}

// User management
model Profile {
  id            String        @id @default(cuid())
  userId        String        @unique
  avatarUrl     String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  active        Boolean       @default(true)
  firstName     String?       @map("first_name")
  lastName      String?       @map("last_name")
  email         String?       @unique
  phoneNumber   String?       @map("phone_number")
  company       String?
  company_role  String?
  role          UserRole      @default(FREE)
  
  // Relations
  evaluations   Evaluation[]
  specialists   Specialist[]  // Only for SUPERADMIN users
  blogPosts     BlogPost[]    // Relation to blog posts

  @@index([userId])
  @@map("profiles")
}

// Simplified evaluation model
model Evaluation {
  id            String          @id @default(cuid())
  type          EvaluationType
  title         String
  score         Float?
  profileId     String
  answers       Json            // Stores the entire answers object as JSON
  metadata      Json?           // Stores additional metadata like interest information
  createdAt     DateTime        @default(now())
  completedAt   DateTime?
  
  // Relations
  profile       Profile         @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@index([profileId])
  @@map("evaluations")
}

// Cybersecurity Specialists model (managed by SuperAdmin)
model Specialist {
  id               String          @id @default(cuid())
  name             String
  bio              String
  expertiseAreas   ExpertiseArea[] // Areas of expertise
  contactEmail     String
  contactPhone     String?
  website          String?
  imageUrl         String?         // Profile image
  minMaturityLevel Int             // Minimum maturity level for recommendation (1-5)
  maxMaturityLevel Int             // Maximum maturity level for recommendation (1-5)
  location         String?         // Geographic location
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  active           Boolean         @default(true)
  
  // Relations - which SuperAdmin created/manages this specialist
  createdById      String
  createdBy        Profile         @relation(fields: [createdById], references: [id])

  @@index([createdById])
  @@map("specialists")
}

// Blog post model
model BlogPost {
  id          String          @id @default(cuid())
  slug        String          @unique
  title       String
  excerpt     String
  content     String          @db.Text
  coverImage  String?
  published   Boolean         @default(false)
  status      BlogPostStatus  @default(DRAFT)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  authorId    String
  tags        String[]
  description String?
  featuredImage String?
  
  // Relations
  author      Profile         @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@index([authorId])
  @@map("blog_posts")
}
